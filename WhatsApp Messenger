Design a messenger service such as Whatsapp.

WHATSAPP MESSENGER

Requirements:
1.	Functional:
A.	Support 1:1 chats
B.	Support group chats
C.	Share text, images, videos and file sharing
D.	Read/ receipt of messages
E.	Show last seen of users

2.	Non-functional:
A.	Low latency
B.	Highly available
C.	Scalable
D.	Low lags
Traffic and scale estimation:
10 billions messages are sent per day by 1 billion users
There are 7lakh active users per second
There are 40 million active messages per second
On avg, each message has 160 characters, ie, 10B*160 = 1.6TB data per day
A message takes 20 ms latency to get sent and each server can handle 100 concurrent connections. So we would need, (40M*20ms/100) servers to support the service, which is a fleet of 8000 servers.

High Level Design:

There are 2 services:
1.	Chat service: manages the traffic related to online messages sent by users. This handles incoming messages, sending messages to recipients and maintaining the status of messages such as whether they are delivered, sent or read)
2.	Transient service: manages the traffic when the user is offline.  This includes storing messages that are sent to a user while they are offline and delivering to them once they come back. It handles last seen and message acknowledgement too.
API Design:
1.	Conversation(userId, offset, messageCount, timestamp): this displays the conversations in a thread, like it is displayed in whatsapp.
userId: id given to user
offset: used to retrieve previous messages
messageCount: the number of messages to be displayed because all messages are not fetched at a stretch
timestamp: the last time messages were updated
2.	sendMessage(fromUser, toUser, clientMetadata, message): this is used to send messages from one user to another
fromUser: user sending the message
toUser: user receiving message
clientMetadata: metadata such as device or platform being used
message: actual message being sent
Models:
1.	Profile DB:
userId int pk
username varchar(50)
profile picture varchar(30): link to storage
contact details: varchar(10)

2.	Group DB:
Group_id -int pk
User ids – nvarchar
TimeofCreation timestamp
groupIcon – varchar(50)

3.	LastSeen DB
userId fk
lastSeen- timestamp
We will maintain a redis cache to fetch data first, only then move to the DB.

ACKNOWLEDGEMENT SERVICE:
This will maintain features of generating and checking acknowledgement responses. Based on the responses received, the service determines how to proceed.
Single Tick: When a message from User A reaches User B, the server sends an acknowledgement signal to confirm that the message has been sent.
Double Tick: After server sends a message to User B through a connection, User B sends an acknowledgement to confirm the receipt of message. The server will then send another acknowledgement to User A, which will be displayed as double tick.
Blue Tick: When user B reads the message, it sends another acknowledgement to the server to confirm that the message has been read. The server then sends an acknowledgement message to User A, which is displayed as a blue tick.
Last Seen: this relies on the heartbeat mechanism which sends continuous messages to the server every 5 sec. The server uses these messages to maintain a table of last seen status which any other user can easily retrieve to check their last seen status.

