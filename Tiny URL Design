URL Shortening Service
Requirements:
1.	Functional:
A.	If long URL is given, return short
B.	If short URL is hit, redirect to long
2.	Non-functional:
A.	Highly available
B.	Low latency
Length of URL: depends on the scale as you don’t want to run short of URLs
Important Questions to ask: What is the traffic expectation and what is the duration for which URL needs to be saved.
A URL is generally stored for a minimum of 10 years
Say, some ‘x’ urls are received per second for shortening.
So, requests per hour = x*60*60
Requests per day = x*60*60*24
Requests per year = x*60*60*24*365
Requests for 10 years = x*60*60*24*365*10 = say, y

Next question to understand: what characters are allowed, generally A-Z, a-z and 0-9 are allowed
These are 62 characters
Length of URL for 62 characters: 62^n > Y
So, n is computed accordingly

ARCHITECTURE:
UI <-> Load balancer <-> URL shortening service <-> Cassandra DB
Assume the service has multiple instances, so they should never generate same shortened URL for 2 long URLs. So, to avoid collisions, we use Redis. 
Every time it receives a URL, it increments a counter and ultimately leads to a new URL.
Now the load at Redis will increase.
It will be a single point of failure, which is bad.
Having multiple Redis will be tricky and if one Redis instance cant satisfy all the load, then we see increased latency.

Having multiple Redis instances will be good unless these instances generate duplicates. So, we need to ensure that they don’t generate duplicates. 
Now, if you assign one Redis to use certain counters and the other one for something else, then adding a third Redis will need someone to manage it all.
Another system without Redis and without a single point of failure:
Use a token service for unique counter. A token service will assign a range to each instance of URL service to maintain uniqueness.

 



