Requirements:
1.	Functional:
FOR A USER/CUSTOMER: 
A.	The user can register to create an account and login to their account
B.	User can search for rooms or homes in their proximity
C.	Users can view prices, photos, ratings and other features
D.	Users can make bookings backed by a fast and secure payment service.
E.	Users can cancel a booked room.
FOR A HOTEL:
A. Hotel should be able to onboard.
B.	Hotel can add and update rooms.
C.	Hotel can keep track of bookings.

2.	Non-Functional
A.	Low latency
B.	High scalability
C.	High consistency


Scale:
500K hotels
1000 rooms/hotel

Overview:

The hotel has a UI connected to a Hotel service which is responsible to onboard a hotel, allow them to add or update rooms etc. This is connected through a Load Balancer and 
once the traffic increases, we can add more instances of the hotel services making it a horizontally scalable component. 
Hotel service has a SQL DB because the data is very much in fixed schema. 
Now say the hotel has updated some images/ videos of their property, then those are stored in CDN and URL of that is stored in SQL. 

Now say, a hotel gets added to the system and we want to notify the users about it, then we will use a Kafka which is connected to the Notification Service finally 
and does this.

We will also add a 'Search' facility for the user and ElasticSearch DB will facilitate this. 
All this forms a part of the 'User Application' where everything goes through a load balancer and is horizontally scalable.
Next we have a booking service which is connected to a SQL DB and stores the booking related information.
Booking service talks to a Payment service. Once payment is successful, the booking is marked completed and confirmed.

Say, the hotel is booked within some dates and you dont want to show it on the UI anymore, Kafka takes care of this too and then 'search' will remove it from the UI.

We only store live data in this SQL. This means that bookings that are started but not completed. Once a booking is completed or cancelled, we move it through "Archival Service" 
to the Cassandra cluster. CAssandra is good for huge number of reads and writes.

Now, the user and Hotel can use a UI just to see the bookings, which uses a booking management service which is connected to both SQL and Cassandra to show both live 
and completed bookings. Connected via a load balancer. We also add a redis on top of the SQL DB to reduce the load on it.
API Design:
1.	/hotels
POST
2.	/hotels/<id>
GET
3.	/hotels/<id>
PUT
4.	/hotels/<id>/<roomId>
GET
5.	/book
POST
Body: (user_id, room_id, quantity, start_date, end_date)
Returns: 200 if booking is successful
DB Schema:
1.	Hotel:
id- int pk
name- varchar(50)
locality_id- int fk
description: varchar(100)
original_images: varchar(50)
display_images: varchar(50)
is_active: Boolean

2.	Hotel_facilities:
id: int pk
is_active: Boolean
facility_id: int fk

3.	Rooms:
Id: int pk
Hotel_id: fk
Display_name: varchar(30)
Is_active: Boolean
Quantity: int
Price_min: int
Price_max int

4.	Facilities:
Id: int pk
Display_name: varchar

5.	Room_facility:
Id: int pk
Room_id: int fk
Facility_id: int fk
Is_active: Boolean

6.	Locality:
Id: int pk
City_id: int fk
Zipcode: int
State_id: fk int


 
